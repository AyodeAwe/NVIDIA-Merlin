FROM nvcr.io/nvidia/tritonserver:21.03-py3 
ARG CONDA_ENV=merlin
ARG RAP_CHAN=rapidsai
ARG RAPIDS_VER=0.18
ARG HUGECTR_VER=v3.0
ARG NVTAB_VER=v0.4.0
ARG HUGEINF_VER=v3.0
ARG RELEASE=false 
ARG SM="70;75;80"

ADD https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh /miniconda.sh
RUN sh /miniconda.sh -b -p /conda && /conda/bin/conda update -n base conda
ENV PATH=${PATH}:/conda/bin
# Enables "source activate conda"
SHELL ["/bin/bash", "-c"]

ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION='python'

RUN apt remove openssl -y
RUN apt update; apt install -y slapd=2.4.49+dfsg-2ubuntu1.7 curl zip wget unzip openssl=1.1.1f-1ubuntu2.3 

RUN conda create --name ${CONDA_ENV}; 
RUN source activate ${CONDA_ENV}; conda install -c ${RAP_CHAN} -c nvidia -c numba -c conda-forge cudf=${RAPIDS_VER} pandas=1.1.5 python=3.8
RUN source activate ${CONDA_ENV}; conda install -c ${RAP_CHAN} -c nvidia -c numba -c conda-forge dask-cudf=${RAPIDS_VER} dask-cuda=${RAPIDS_VER} nvtx 
RUN source activate ${CONDA_ENV}; conda install -c conda-forge cmake
RUN source activate ${CONDA_ENV}; git clone https://github.com/NVIDIA/NVTabular.git /nvtabular/; cd /nvtabular/; if [[ "$RELEASE" == "true" ]] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; pip install -e .;
RUN source activate ${CONDA_ENV}; pip install pynvml pytest graphviz scipy sklearn 
RUN source activate ${CONDA_ENV}; conda install -c rapidsai asvdb
 
RUN source activate ${CONDA_ENV}; mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch p2p https://github.com/NVIDIA/nccl.git nccl && cd - && \
    cd /var/tmp/nccl && \
    PREFIX=/usr/local/nccl make -j$(nproc) install && \
    rm -rf /var/tmp/nccl
ENV CPATH=/usr/local/nccl/include:$CPATH \
    LD_LIBRARY_PATH=/usr/local/nccl/lib:$LD_LIBRARY_PATH \
    LIBRARY_PATH=/usr/local/nccl/lib:$LIBRARY_PATH \
    PATH=/usr/local/nccl/bin:$PATH


RUN source activate ${CONDA_ENV}; apt update -y && apt install rapidjson-dev -y

RUN source activate ${CONDA_ENV}; mkdir -p /var/tmp && cd /var/tmp && git clone https://github.com/NVIDIA/HugeCTR.git HugeCTR && cd - && \
      cd /var/tmp/HugeCTR && if [[ "$RELEASE" == "true" ]]; then git fetch --all --tags && git checkout tags/${HUGECTR_VER}; else git checkout master; fi && \
      git submodule update --init --recursive && \
      mkdir -p build && cd build &&\
      cmake -DCMAKE_BUILD_TYPE=Release -DSM=$SM -DENABLE_INFERENCE=ON .. && make -j$(nproc) && make install && \
      export CPATH=/usr/local/hugectr/include:$CPATH && \
      export LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH && \
      cd /var/tmp && git clone https://github.com/triton-inference-server/hugectr_backend hugectr_inference_backend && cd - && \
      cd /var/tmp/hugectr_inference_backend && if [[ "$RELEASE" == "true" ]]; then git fetch --all --tags && git checkout tags/${HUGEINF_VER}; else git checkout main; fi && \
      mkdir -p build && cd build && \
      cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/hugectr .. && make -j$(nproc) && make install && \
      rm -rf /var/tmp/HugeCTR /var/tmp/hugectr_inference_backend;

RUN ln -s /usr/local/hugectr/backends/hugectr /opt/tritonserver/backends/ 

RUN source activate ${CONDA_ENV}; pip install nvidia-pyindex==1.0.6; pip install tritonclient[all] grpcio-channelz
RUN source activate ${CONDA_ENV}; apt update; apt install -y graphviz ; 

RUN source activate ${CONDA_ENV}; conda env config vars set CPATH=/usr/local/hugectr/include:$CPATH LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH LD_LIBRARY_PATH=/opt/tritonserver/backends/hugectr:/usr/local/hugectr/lib/:$LD_LIBRARY_PATH
RUN source activate ${CONDA_ENV}; conda clean --all -y
RUN echo $(du -h --max-depth=1 /)

HEALTHCHECK NONE
ENTRYPOINT []
CMD ["/bin/bash"]
